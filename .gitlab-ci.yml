stages:
  - download-revit-api
  - build
  - sign
  - publish

download-revit-api:
  stage: download-revit-api
  image: alpine:3.12
  variables:
    REVIT_API_URL: https://bimag.b-cdn.net/revit/2019/RevitAPI.dll
    REVIT_API_CHECKSUM: da1fbac1e5afb210478cbb508e0677679e994da8c9e13b56c43d5e122dabd6e7
    REVIT_APIUI_URL: https://bimag.b-cdn.net/revit/2019/RevitAPIUI.dll
    REVIT_APIUI_CHECKSUM: d29a755922997310a215afa83fa44ea91aafdd6feddce722e5feed98d2ae9f73
  script:
    - apk add --update --no-cache curl
    - mkdir revit-api
    - |
        echo "${REVIT_API_CHECKSUM}  -" > /tmp/checksum \
        && curl -L "${REVIT_API_URL}" \
        | tee revit-api/RevitAPI.dll \
        | sha256sum -c /tmp/checksum
    - |
        echo "${REVIT_APIUI_CHECKSUM}  -" > /tmp/checksum \
        && curl -L "${REVIT_APIUI_URL}" \
        | tee revit-api/RevitAPIUI.dll \
        | sha256sum -c /tmp/checksum
  artifacts:
    paths:
      - revit-api/
    expire_in: 1 day

build:
  stage: build
  tags:
    - shared-windows
    - windows
    - windows-1809
  dependencies:
    - download-revit-api
  variables:
    MSBUILD: 'C:\Program Files (x86)\Microsoft Visual Studio\2019\BuildTools\MSBuild\Current\Bin\MSBuild.exe'
  script:
    - '& "$MSBUILD" -p:TargetFrameworkVersion=v4.7.2 -p:Configuration=2021 -p:ReferencePath="../revit-api" -p:PostBuildEvent= CS/RevitLookup.sln'
    - New-Item -Force -ItemType Directory -Path artifacts | Out-Null
    - Copy-Item "CS/bin/2021/RevitLookup.dll" artifacts/
    - Copy-Item "CS/RevitLookup.addin" artifacts/
  artifacts:
    paths:
      - artifacts/
    expire_in: 1 day

sign:
  stage: sign
  image: debian:buster-slim
  dependencies:
    - build
  variables:
    ASSEMBLY: artifacts/RevitLookup.dll
    TIMESERVER: http://timestamp.verisign.com/scripts/timstamp.dll
    DEBIAN_FRONTEND: noninteractive
  script:
    - apt-get update && apt-get install -y --no-install-recommends osslsigncode
    - mkdir -p .secrets && mount -t ramfs -o size=1M ramfs .secrets/
    - echo "${CODESIGN_CERTIFICATE}" | base64 --decode > .secrets/authenticode.spc
    - echo "${CODESIGN_KEY}" | base64 --decode > .secrets/authenticode.key
    - osslsigncode -h sha1 -spc .secrets/authenticode.spc -key .secrets/authenticode.key -t ${TIMESERVER} -in "${ASSEMBLY}" -out "${ASSEMBLY}-sha1"
    - osslsigncode -nest -h sha2 -spc .secrets/authenticode.spc -key .secrets/authenticode.key -t ${TIMESERVER} -in "${ASSEMBLY}-sha1" -out "${ASSEMBLY}"
    - rm "${ASSEMBLY}-sha1"
  after_script:
    - rmdir .secrets
  artifacts:
    paths:
      - artifacts/
    expire_in: 1 day
  only:
    variables:
      - $CODESIGN_CERTIFICATE != null
      - $CODESIGN_KEY != null

publish:
  stage: publish
  image: alpine:3.12
  dependencies:
    - sign
  before_script:
    - |
        if [ -n "${CI_COMMIT_TAG}" ]; then
            export RELEASE_NAME="${CI_COMMIT_TAG}"
            export S3_FOLDER="releases"
        else
            export RELEASE_NAME="${CI_COMMIT_BRANCH}-$(date --utc -Iseconds)"
            export S3_FOLDER="current"
        fi
    - export ZIP="${RELEASE_NAME}.7z"

    - apk add --update --no-cache curl jq py-pip p7zip
    - pip install awscli
    - eval $(aws ecr get-login --no-include-email --region $AWS_REGION | sed 's|https://||')
  script:
    - 7z a "${ZIP}" ./artifacts/*
    - aws s3 cp "${ZIP}" "s3://${S3_BUCKET_NAME}/${S3_FOLDER}/${ZIP}"
  only:
    variables:
      - $AWS_ACCESS_KEY_ID != null
      - $AWS_SECRET_ACCESS_KEY != null
      - $AWS_REGION != null
      - $S3_BUCKET_NAME != null
